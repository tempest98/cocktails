// Generated by kea-typegen on Mon, 21 Apr 2025 10:06:19 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { Ingredient, IngredientSearchItem } from '../types/ingredientTypes'

export interface ingredientsLogicType extends Logic {
  actionCreators: {
    fetchIngredients: () => {
      type: 'fetch ingredients (src.logic.ingredientsLogic)'
      payload: {
        value: true
      }
    }
    setSearchTerm: (term: string) => {
      type: 'set search term (src.logic.ingredientsLogic)'
      payload: {
        term: string
      }
    }
    addSelectedIngredient: (ingredient: string) => {
      type: 'add selected ingredient (src.logic.ingredientsLogic)'
      payload: {
        ingredient: string
      }
    }
    removeSelectedIngredient: (ingredient: string) => {
      type: 'remove selected ingredient (src.logic.ingredientsLogic)'
      payload: {
        ingredient: string
      }
    }
    loadIngredients: () => {
      type: 'load ingredients (src.logic.ingredientsLogic)'
      payload: any
    }
    loadIngredientsSuccess: (
      ingredients: Ingredient[],
      payload?: any
    ) => {
      type: 'load ingredients success (src.logic.ingredientsLogic)'
      payload: {
        ingredients: Ingredient[]
        payload?: any
      }
    }
    loadIngredientsFailure: (
      error: string,
      errorObject?: any
    ) => {
      type: 'load ingredients failure (src.logic.ingredientsLogic)'
      payload: {
        error: string
        errorObject?: any
      }
    }
  }
  actionKeys: {
    'fetch ingredients (src.logic.ingredientsLogic)': 'fetchIngredients'
    'set search term (src.logic.ingredientsLogic)': 'setSearchTerm'
    'add selected ingredient (src.logic.ingredientsLogic)': 'addSelectedIngredient'
    'remove selected ingredient (src.logic.ingredientsLogic)': 'removeSelectedIngredient'
    'load ingredients (src.logic.ingredientsLogic)': 'loadIngredients'
    'load ingredients success (src.logic.ingredientsLogic)': 'loadIngredientsSuccess'
    'load ingredients failure (src.logic.ingredientsLogic)': 'loadIngredientsFailure'
  }
  actionTypes: {
    fetchIngredients: 'fetch ingredients (src.logic.ingredientsLogic)'
    setSearchTerm: 'set search term (src.logic.ingredientsLogic)'
    addSelectedIngredient: 'add selected ingredient (src.logic.ingredientsLogic)'
    removeSelectedIngredient: 'remove selected ingredient (src.logic.ingredientsLogic)'
    loadIngredients: 'load ingredients (src.logic.ingredientsLogic)'
    loadIngredientsSuccess: 'load ingredients success (src.logic.ingredientsLogic)'
    loadIngredientsFailure: 'load ingredients failure (src.logic.ingredientsLogic)'
  }
  actions: {
    fetchIngredients: () => void
    setSearchTerm: (term: string) => void
    addSelectedIngredient: (ingredient: string) => void
    removeSelectedIngredient: (ingredient: string) => void
    loadIngredients: () => void
    loadIngredientsSuccess: (ingredients: Ingredient[], payload?: any) => void
    loadIngredientsFailure: (error: string, errorObject?: any) => void
  }
  asyncActions: {
    fetchIngredients: () => Promise<any>
    setSearchTerm: (term: string) => Promise<any>
    addSelectedIngredient: (ingredient: string) => Promise<any>
    removeSelectedIngredient: (ingredient: string) => Promise<any>
    loadIngredients: () => Promise<any>
    loadIngredientsSuccess: (ingredients: Ingredient[], payload?: any) => Promise<any>
    loadIngredientsFailure: (error: string, errorObject?: any) => Promise<any>
  }
  defaults: {
    ingredients: any
    ingredientsLoading: boolean
    selectedIngredients: Set<string>
    searchTerm: string
  }
  events: {}
  key: undefined
  listeners: {
    fetchIngredients: ((
      action: {
        type: 'fetch ingredients (src.logic.ingredientsLogic)'
        payload: {
          value: true
        }
      },
      previousState: any
    ) => void | Promise<void>)[]
  }
  path: ['src', 'logic', 'ingredientsLogic']
  pathString: 'src.logic.ingredientsLogic'
  props: Record<string, unknown>
  reducer: (
    state: any,
    action: any,
    fullState: any
  ) => {
    ingredients: any
    ingredientsLoading: boolean
    selectedIngredients: Set<string>
    searchTerm: string
  }
  reducers: {
    ingredients: (state: any, action: any, fullState: any) => any
    ingredientsLoading: (state: boolean, action: any, fullState: any) => boolean
    selectedIngredients: (state: Set<string>, action: any, fullState: any) => Set<string>
    searchTerm: (state: string, action: any, fullState: any) => string
  }
  selector: (state: any) => {
    ingredients: any
    ingredientsLoading: boolean
    selectedIngredients: Set<string>
    searchTerm: string
  }
  selectors: {
    ingredients: (state: any, props?: any) => any
    ingredientsLoading: (state: any, props?: any) => boolean
    selectedIngredients: (state: any, props?: any) => Set<string>
    searchTerm: (state: any, props?: any) => string
    sortedIngredientNames: (state: any, props?: any) => IngredientSearchItem[]
  }
  sharedListeners: {}
  values: {
    ingredients: any
    ingredientsLoading: boolean
    selectedIngredients: Set<string>
    searchTerm: string
    sortedIngredientNames: IngredientSearchItem[]
  }
  _isKea: true
  _isKeaWithKey: false
  __keaTypeGenInternalSelectorTypes: {
    sortedIngredientNames: (ingredients: any) => IngredientSearchItem[]
  }
}
