// Generated by kea-typegen on Mon, 21 Apr 2025 10:07:57 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { Cocktail } from '../types/cocktailTypes'

export interface cocktailsLogicType extends Logic {
  actionCreators: {
    fetchCocktails: () => {
      type: 'fetch cocktails (src.logic.cocktailsLogic)'
      payload: {
        value: true
      }
    }
    setSearchMode: (mode: 'complete' | 'missing') => {
      type: 'set search mode (src.logic.cocktailsLogic)'
      payload: {
        mode: 'complete' | 'missing'
      }
    }
    loadCocktails: () => {
      type: 'load cocktails (src.logic.cocktailsLogic)'
      payload: any
    }
    loadCocktailsSuccess: (
      cocktails: Cocktail[],
      payload?: any
    ) => {
      type: 'load cocktails success (src.logic.cocktailsLogic)'
      payload: {
        cocktails: Cocktail[]
        payload?: any
      }
    }
    loadCocktailsFailure: (
      error: string,
      errorObject?: any
    ) => {
      type: 'load cocktails failure (src.logic.cocktailsLogic)'
      payload: {
        error: string
        errorObject?: any
      }
    }
  }
  actionKeys: {
    'fetch cocktails (src.logic.cocktailsLogic)': 'fetchCocktails'
    'set search mode (src.logic.cocktailsLogic)': 'setSearchMode'
    'load cocktails (src.logic.cocktailsLogic)': 'loadCocktails'
    'load cocktails success (src.logic.cocktailsLogic)': 'loadCocktailsSuccess'
    'load cocktails failure (src.logic.cocktailsLogic)': 'loadCocktailsFailure'
  }
  actionTypes: {
    fetchCocktails: 'fetch cocktails (src.logic.cocktailsLogic)'
    setSearchMode: 'set search mode (src.logic.cocktailsLogic)'
    loadCocktails: 'load cocktails (src.logic.cocktailsLogic)'
    loadCocktailsSuccess: 'load cocktails success (src.logic.cocktailsLogic)'
    loadCocktailsFailure: 'load cocktails failure (src.logic.cocktailsLogic)'
  }
  actions: {
    fetchCocktails: () => void
    setSearchMode: (mode: 'complete' | 'missing') => void
    loadCocktails: () => void
    loadCocktailsSuccess: (cocktails: Cocktail[], payload?: any) => void
    loadCocktailsFailure: (error: string, errorObject?: any) => void
  }
  asyncActions: {
    fetchCocktails: () => Promise<any>
    setSearchMode: (mode: 'complete' | 'missing') => Promise<any>
    loadCocktails: () => Promise<any>
    loadCocktailsSuccess: (cocktails: Cocktail[], payload?: any) => Promise<any>
    loadCocktailsFailure: (error: string, errorObject?: any) => Promise<any>
  }
  defaults: {
    cocktails: any
    cocktailsLoading: boolean
    searchMode: 'complete' | 'missing'
  }
  events: {}
  key: undefined
  listeners: {
    fetchCocktails: ((
      action: {
        type: 'fetch cocktails (src.logic.cocktailsLogic)'
        payload: {
          value: true
        }
      },
      previousState: any
    ) => void | Promise<void>)[]
  }
  path: ['src', 'logic', 'cocktailsLogic']
  pathString: 'src.logic.cocktailsLogic'
  props: Record<string, unknown>
  reducer: (
    state: any,
    action: any,
    fullState: any
  ) => {
    cocktails: any
    cocktailsLoading: boolean
    searchMode: 'complete' | 'missing'
  }
  reducers: {
    cocktails: (state: any, action: any, fullState: any) => any
    cocktailsLoading: (state: boolean, action: any, fullState: any) => boolean
    searchMode: (state: 'complete' | 'missing', action: any, fullState: any) => 'complete' | 'missing'
  }
  selector: (state: any) => {
    cocktails: any
    cocktailsLoading: boolean
    searchMode: 'complete' | 'missing'
  }
  selectors: {
    cocktails: (state: any, props?: any) => any
    cocktailsLoading: (state: any, props?: any) => boolean
    searchMode: (state: any, props?: any) => 'complete' | 'missing'
    filteredCocktails: (state: any, props?: any) => Cocktail[]
    missingIngredients: (state: any, props?: any) => Record<string, string[]>
  }
  sharedListeners: {}
  values: {
    cocktails: any
    cocktailsLoading: boolean
    searchMode: 'complete' | 'missing'
    filteredCocktails: Cocktail[]
    missingIngredients: Record<string, string[]>
  }
  _isKea: true
  _isKeaWithKey: false
  __keaTypeGenInternalSelectorTypes: {
    filteredCocktails: (
      cocktails: any,
      selectedIngredients: Set<string>,
      searchMode: 'complete' | 'missing',
      ingredients: any
    ) => Cocktail[]
    missingIngredients: (cocktails: any, selectedIngredients: Set<string>, ingredients: any) => Record<string, string[]>
  }
}
